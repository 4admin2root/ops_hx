input {
	file{
		type => "nginx_access"
		path => ["/tmp/usergrid-access.log"]
#		start_position => "end"
	}
}
filter {
    if [type] == "nginx_access" {
        grok {
            match => [
                "message" , "%{IP:from_ip} (?:%{URIHOST:api_domain}|%{HOSTNAME:api_domain}) - \[%{TIMESTAMP_ISO8601:timestamp}\] \"%{WORD:http_method}%{SPACE}/%{URIPARAMINPATH:org}/%{URIPARAMINPATH:app}/%{URIPARAMINPATH:api}(?:%{URIPATH:others})?([^?/s]*)[?]?(%{URIPARAM_CUSTOM:uri_param})? HTTP/%{NUMBER:http_version}\" %{NUMBER:http_status} (?:%{NUMBER:bytes_read}|-) %{QS} %{QS:referrer} %{QS:agent} %{NUMBER:time_duration:float} (?:%{NUMBER:time_backend_response:float}|-) (?:(%{IP:ip}:%{POSINT:port})|-) (?:%{NUMBER}|-)"
            ] 
	    remove_field => ["message"]
	    patterns_dir => "/etc/logstash/patterns"
        }
        if ("_grokparsefailure" in [tags]) {
              if ( [message] =~  /(.*\s504\s$)/ ) {
              grok{ 
		match => [
		"message","%{IP:from_ip} (?:%{URIHOST:api_domain}|%{HOSTNAME:api_domain}) - \[%{TIMESTAMP_ISO8601:timestamp}\] \"%{WORD:http_method}%{SPACE}/%{URIPARAMINPATH:org}/%{URIPARAMINPATH:app}/%{URIPARAMINPATH:api}(?:%{URIPATH:others})?([^?/s]*)[?]?(%{URIPARAM_CUSTOM:uri_param})? HTTP/%{NUMBER:http_version}\" %{NUMBER:http_status} (?:%{NUMBER:bytes_read}|-) %{QS} %{QS:referrer} %{QS:agent} %{NUMBER:time_duration:float} %{GREEDYDATA:gdata}"
		]
	    	#remove_field => ["message"]
		patterns_dir => "/etc/logstash/patterns"
		}
	     }
	else {drop{}}
	}
        urldecode {
            all_fields => true
        }
        date {
            match => ["timestamp" , "ISO8601"]
        }
        kv {
            source => "uri_param"
            field_split => "&"
        }
	kv {
             source => "gdata"
             field_split => ","
             #remove_field => ["gdata"]
           }
        mutate {
            convert => ["limit", "integer"]
        }
    }
}


output{
	stdout{ codec => "rubydebug" }

}
