#!/usr/bin/env escript
%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ft=erlang ts=4 sw=4 et
%% -------------------------------------------------------------------
%%
%% nodetool: Helper Script for interacting with live nodes
%%
%% -------------------------------------------------------------------
main(Args) ->
    ok = start_epmd(),
    %% Extract the args
    {RestArgs, TargetNode} = process_args(Args, [], undefined),

    %% any commands that don't need a running node
    ScriptName
        = case RestArgs of
              ["check", File] ->
                  case file:consult(File) of
                      {ok, _} ->
                          io:format("ok\n"),
                          halt(0);
                      {error, {Line, Mod, Term}} ->
                          io:format(standard_error, ["Error on line ",
                                                     file:format_error({Line, Mod, Term}), "\n"], []),
                          halt(1);
                      {error, R} ->
                          io:format(standard_error, ["Error reading config file: ",
                                                     file:format_error(R), "\n"], []),
                          halt(1)
                  end;
              [File] -> File;
              _ ->
                  usage(),
                  halt(1)
          end,

    %% See if the node is currently running  -- if it's not, we'll bail
    case {net_kernel:hidden_connect_node(TargetNode),
          net_adm:ping(TargetNode)} of
        {true, pong} ->
            ok;
        {false,pong} ->
            io:format("Failed to connect to node ~p .\n", [TargetNode]),
            halt(1);
        {_, pang} ->
            io:format("Node ~p not responding to pings.\n", [TargetNode]),
            halt(1)
    end,

    case file:read_file(ScriptName) of
        {ok, ScriptString} ->
            try
                Bindings = erl_eval:new_bindings(),
                case rpc:call(TargetNode,
                              erl_eval,
                              exprs,
                              [parse(binary_to_list(ScriptString)), Bindings],
                              60000) of
                    {badrpc, Reason} ->
                        io:format("RPC to ~p failed: ~p\n", [TargetNode, Reason]),
                        halt(1);
                    {value, _Value, _Bindings} ->
                        ok
                end
            catch
                Class:Error ->
                    io:format("parse error ~p:~p~n", [Class, Error]),
                    halt(1)
            end;
        FileError ->
            io:format("error reading file ~p ~p~n", [ ScriptName, FileError]),
            halt(1)
    end,
    net_kernel:stop().

process_args([], Acc, TargetNode) ->
    {lists:reverse(Acc), TargetNode};
process_args(["-setcookie", Cookie | Rest], Acc, TargetNode) ->
    erlang:set_cookie(node(), list_to_atom(Cookie)),
    process_args(Rest, Acc, TargetNode);
process_args(["-name", TargetName | Rest], Acc, _) ->
    ThisNode = append_node_suffix(TargetName, "_maint_"),
    {ok, _} = net_kernel:start([ThisNode, longnames]),
    process_args(Rest, Acc, nodename(TargetName));
process_args(["-sname", TargetName | Rest], Acc, _) ->
    ThisNode = append_node_suffix(TargetName, "_maint_"),
    {ok, _} = net_kernel:start([ThisNode, shortnames]),
    process_args(Rest, Acc, nodename(TargetName));
process_args([Arg | Rest], Acc, Opts) ->
    process_args(Rest, [Arg | Acc], Opts).


start_epmd() ->
    [] = os:cmd(epmd_path() ++ " -daemon"),
    ok.

epmd_path() ->
    ErtsBinDir = filename:dirname(escript:script_name()),
    Name = "epmd",
    case os:find_executable(Name, ErtsBinDir) of
        false ->
            case os:find_executable(Name) of
                false ->
                    io:format("Could not find epmd.~n"),
                    halt(1);
                GlobalEpmd ->
                    GlobalEpmd
            end;
        Epmd ->
            Epmd
    end.


nodename(Name) ->
    case string:tokens(Name, "@") of
        [_Node, _Host] ->
            list_to_atom(Name);
        [Node] ->
            [_, Host] = string:tokens(atom_to_list(node()), "@"),
            list_to_atom(lists:concat([Node, "@", Host]))
    end.

append_node_suffix(Name, Suffix) ->
    case string:tokens(Name, "@") of
        [Node, Host] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid(), "@", Host]));
        [Node] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid()]))
    end.


%%
%% Given a string or binary, parse it into a list of terms, ala file:consult/0
%%
usage() ->
    io:format("usage: todo ~n",[]).
parse(Str) ->
    {ok, Tokens, _} = erl_scan:string(Str),
    {ok, Exprs} = erl_parse:parse_exprs(Tokens),
    Exprs.
